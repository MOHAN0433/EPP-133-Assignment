service: employee-portal-service
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  environment:
    EMPLOYEE_TABLE: ${self:custom.employeeTableName}
    ASSIGNMENTS_TABLE: ${self:custom.assignmentTableName}
    METADATA_TABLE: ${self:custom.metadataTableName}
    BANK_TABLE: ${self:custom.bankTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
      Resource:
        - !GetAtt EmployeeTable.Arn
        - !GetAtt AssignmentTable.Arn
        - !GetAtt MetadataTable.Arn
        - !GetAtt bankTable.Arn
custom:
  employeeTableName: employee-Details-${self:provider.stage}
  assignmentTableName: assignment-Details-${self:provider.stage}
  metadataTableName: metadata
  bankTableName: bank
plugins:
  - serverless-iam-roles-per-function
functions:
  employeeGet:
    handler: src/Lamda/employee/employeeHandler.getEmployee
    name: employeeGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee/get/{employeeId}
          method: GET
  employeeCreate:
    handler: src/Lamda/employee/employeeHandler.createEmployee
    name: employeeCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee
          method: POST
  employeeUpdate:
    handler: src/Lamda/employee/employeeHandler.updateEmployee
    name: employeeUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee/{employeeId}
          method: PUT
  employeeGetAll:
    handler: src/Lamda/employee/employeeHandler.getAllEmployees
    name: employeeGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employees
          method: GET
  assignmentCreate:
    handler: src/Lamda/assignment/assignmentHandler.createAssignment
    name: assignmentCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment
          method: POST
  assignmentGet:
    handler: src/Lamda/assignment/assignmentHandler.getAssignmentByEmployeeId
    name: assignmentGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/employee/{employeeId}  # Modify path to ensure uniqueness
          method: GET
  assignmentUpdate:
    handler: src/Lamda/assignment/assignmentHandler.updateAssignment
    name: assignmentUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/{assignmentId}/employee/{employeeId}
          method: PUT
  metadataGetAll:
    handler: src/Lamda/metadata/metadataHandler.getAllMeatadatas
    name: metadataGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/getAll
          method: GET
  bankCreate:
    handler: src/Lamda/bank/bankHandler.createBankDetails
    name: assignmentCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment
          method: POST

resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeeTableName}
        AttributeDefinitions:
          - AttributeName: employeeId
            AttributeType: S
        KeySchema:
          - AttributeName: employeeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AssignmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.assignmentTableName}
        AttributeDefinitions:
          - AttributeName: assignmentId
            AttributeType: N
          - AttributeName: employeeId
            AttributeType: S
        KeySchema:
          - AttributeName: assignmentId
            KeyType: HASH
          - AttributeName: employeeId
            KeyType: RANGE
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    MetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.metadataTableName}
        AttributeDefinitions:
          - AttributeName: metadataId
            AttributeType: N
        KeySchema:
          - AttributeName: metadataId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BankTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bankTableName}
        AttributeDefinitions:
          - AttributeName: bankId
            AttributeType: N
          - AttributeName: employeeId
            AttributeType: S
        KeySchema:
          - AttributeName: bankId
            KeyType: HASH
          - AttributeName: employeeId
            KeyType: RANGE
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1