service: employee-portal-service
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
  environment:
    EMPLOYEE_TABLE: ${self:custom.employeeTableName}
    ASSIGNMENTS_TABLE: ${self:custom.assignmentTableName}
    METADATA_TABLE: ${self:custom.metadataTableName}
    BANK_TABLE: ${self:custom.bankTableName}
    PAYROLL_TABLE: ${self:custom.payrollTableName}
    EDUCATION_TABLE: ${self:custom.educationTableName}
    CERTIFICATION_TABLE: ${self:custom.certificationTableName}
    BUCKET: employee-certification-documents
    SENDGRID_API_KEY: "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"
    API_Key_ID: "j-Cqgw36SP6L2W5HfIM-vA"
    TEMPLATE_ID: "d-a8a35d647ac547acb9bdd28a3fe83f2a"
    SENDER_MAIL_ID: "ravi@hyniva.com"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "s3:PutObject"  # Adding permission to upload files to S3
      Resource:
        - !GetAtt EmployeeTable.Arn
        - !GetAtt AssignmentTable.Arn
        - !GetAtt MetadataTable.Arn
        - !GetAtt BankTable.Arn
        - !GetAtt payrollTable.Arn
        - !GetAtt educationTable.Arn
        - !GetAtt certificationTable.Arn
        - "arn:aws:s3:::education0433123/*"  # S3 bucket name
        - "arn:aws:s3:::employee-certification-documents/*"
custom:
  employeeTableName: employee-Details-${self:provider.stage}
  assignmentTableName: assignment-Details-${self:provider.stage}
  metadataTableName: metadata
  bankTableName: bank
  payrollTableName: payroll
  educationTableName: education
  certificationTableName: certification
plugins:
  - serverless-iam-roles-per-function
functions:
  employeeGet:
    handler: src/Lamda/employee/employeeHandler.getEmployee
    name: employeeGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee/get/{employeeId}
          method: GET
  employeeCreate:
    handler: src/Lamda/employee/employeeHandler.createEmployee
    name: employeeCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee
          method: POST
  employeeUpdate:
    handler: src/Lamda/employee/employeeHandler.updateEmployee
    name: employeeUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee/{employeeId}
          method: PUT
  employeeGetAll:
    handler: src/Lamda/employee/employeeHandler.getAllEmployees
    name: employeeGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employees
          method: GET
  assignmentCreate:
    handler: src/Lamda/assignment/assignmentHandler.createAssignment
    name: assignmentCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment
          method: POST
  assignmentGet:
    handler: src/Lamda/assignment/assignmentHandler.getAssignmentByEmployeeId
    name: assignmentGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/employee/{employeeId}  # Modify path to ensure uniqueness
          method: GET
  assignmentUpdate:
    handler: src/Lamda/assignment/assignmentHandler.updateAssignment
    name: assignmentUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/{assignmentId}/employee/{employeeId}
          method: PUT
  metadataGetAll:
    handler: src/Lamda/metadata/metadataHandler.getAllMeatadatas
    name: metadataGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/getAll
          method: GET
  bankCreate:
    handler: src/Lamda/bank/bankHandler.createBankDetails
    name: bankCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: bank
          method: POST
  payrollCreate:
    handler: src/Lamda/payroll/payrollHandler.createPayroll
    name: payrollCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: payroll
          method: POST
  payrollGet:
    handler: src/Lamda/payroll/payrollHandler.getPayrollByEmployeeId
    name: payrollGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: payroll/get
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                employeeId: true
  educationCreate:
    handler: src/Lamda/education/educationHandler.createEducation
    name: educationCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: education
          method: POST
  educationUpload:
    handler: src/Lamda/education/educationHandler.uploadEducation
    name: educationUpload
    memorySize: 128
    timeout: 600
    events:
      - http:
          path: education/{educationId}
          method: PUT
  certificationCreate:
    handler: src/Lamda/certification/certificationHandler.createCertification
    name: certificationCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: certification
          method: POST
  certificationUpload:
    handler: src/Lamda/certification/certificationHandler.uploadCertification
    name: certificationUpload
    memorySize: 256
    timeout: 600
    events:
      - http:
          path: certification/{certificationId}
          method: PUT
  educationGet:
    handler: src/Lamda/education/educationHandler.geteducationDetailsByEmployeeId
    name: educationsGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: educations/get
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                employeeId: true
  educationGetById:
    handler: src/Lamda/education/educationHandler.geteducationDetailByEducationId
    name: educationGetById
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: education
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                educationId: true

resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeeTableName}
        AttributeDefinitions:
          - AttributeName: employeeId
            AttributeType: N
        KeySchema:
          - AttributeName: employeeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AssignmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.assignmentTableName}
        AttributeDefinitions:
          - AttributeName: assignmentId
            AttributeType: N
          - AttributeName: employeeId
            AttributeType: N
        KeySchema:
          - AttributeName: assignmentId
            KeyType: HASH
          - AttributeName: employeeId
            KeyType: RANGE
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    MetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.metadataTableName}
        AttributeDefinitions:
          - AttributeName: metadataId
            AttributeType: N
        KeySchema:
          - AttributeName: metadataId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BankTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bankTableName}
        AttributeDefinitions:
          - AttributeName: bankId
            AttributeType: N
          - AttributeName: employeeId
            AttributeType: N
        KeySchema:
          - AttributeName: bankId
            KeyType: HASH
          - AttributeName: employeeId
            KeyType: RANGE
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    payrollTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.payrollTableName}
        AttributeDefinitions:
          - AttributeName: payrollId
            AttributeType: N
        KeySchema:
          - AttributeName: payrollId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    educationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.educationTableName}
        AttributeDefinitions:
          - AttributeName: educationId
            AttributeType: N
        KeySchema:
          - AttributeName: educationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    certificationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.certificationTableName}
        AttributeDefinitions:
          - AttributeName: certificationId
            AttributeType: N
        KeySchema:
          - AttributeName: certificationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1